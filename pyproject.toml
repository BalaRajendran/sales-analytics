[project]
name = "sales-analyst-api"
version = "0.1.0"
description = "Sales Analyst Dashboard Backend API"
readme = "README.md"
requires-python = ">=3.12"
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = ["sales", "analytics", "dashboard", "fastapi", "api", "backend"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Framework :: FastAPI",
]

dependencies = [
    # Core Framework
    "fastapi>=0.116.1",
    "uvicorn[standard]>=0.35.0",
    # Database
    "sqlalchemy>=2.0.41",
    "alembic>=1.16.4",
    "asyncpg>=0.30.0",
    "aiosqlite>=0.21.0",
    # Authentication and Security
    "python-jose[cryptography]>=3.5.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.20",
    "pyjwt>=2.10.1",
    # HTTP and Validation
    "httpx>=0.28.1",
    "aiohttp>=3.12.14",
    "aiofiles>=24.1.0",
    "pydantic[email]>=2.11.7",
    "pydantic-settings>=2.10.1",
    # Rate Limiting
    "slowapi>=0.1.9",
    "redis>=4.5.0,<5.0",
    # Utilities
    "python-dotenv>=1.1.1",
    "typing-extensions>=4.7.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.12.3",
    "pre-commit>=4.2.0",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "httpx>=0.28.1",
    "faker>=37.4.2",
]

test = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "pytest-xdist>=3.8.0",
    "coverage>=7.9.2",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.ruff]
target-version = "py312"
line-length = 120
fix = true
show-fixes = true
format.quote-style = "double"
format.indent-style = "space"
format.skip-magic-trailing-comma = false
format.line-ending = "auto"

lint.select = [
    "F",     # pyflakes
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "I",     # isort
    "N",     # pep8-naming
    "UP",    # pyupgrade
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "S",     # flake8-bandit
]

lint.ignore = [
    "S101",  # Allow assert in tests
    "S105", "S106", "S107",  # Allow hardcoded passwords in tests/dev
    "S104",  # Allow binding to all interfaces
    "B008",  # Allow function calls in arguments (for Depends)
]

lint.fixable = ["ALL"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = [
    "S101",
    "S105", "S106", "S107",
]
"**/migrations/*" = [
    "E501", "F401", "F811",
]

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.pytest.ini_options]
pythonpath = ["src"]
asyncio_mode = "auto"
testpaths = ["tests"]
addopts = [
    "--cov=src",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--strict-markers",
    "--strict-config",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
