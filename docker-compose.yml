version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: urlshortener-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-urlshortener}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_DB: ${POSTGRES_DB:-urlshortener}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-urlshortener}"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"  # Exposed for development; remove in production

  # Redis Cache and Rate Limiting
  redis:
    image: redis:7-alpine
    container_name: urlshortener-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-changeme} --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "6379:6379"  # Exposed for development; remove in production

  # FastAPI Application (Backend + Built Frontend)
  fastapi:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: urlshortener-api
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-urlshortener}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-urlshortener}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-changeme}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    ports:
      - "${APP_PORT:-8000}:8000"
    volumes:
      - ./logs:/app/logs  # Application logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend (Development Mode - Optional)
  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: urlshortener-frontend-dev
    restart: unless-stopped
    environment:
      - VITE_API_URL=http://localhost:8000
    ports:
      - "${FRONTEND_PORT:-5173}:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Prevent overwriting node_modules with bun
    networks:
      - app-network
    profiles:
      - dev  # Only start with --profile dev flag

  # React Frontend (Production)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: urlshortener-frontend
    restart: unless-stopped
    depends_on:
      - fastapi
    networks:
      - app-network
    environment:
      - NODE_ENV=production
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Note: Port 3000 is internal only, accessed via Nginx

  # Nginx Reverse Proxy (proxies both frontend and API)
  nginx:
    image: nginx:alpine
    container_name: urlshortener-nginx
    restart: unless-stopped
    depends_on:
      - fastapi
      - frontend
    networks:
      - app-network
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro  # Nginx configuration
      - ./ssl:/etc/nginx/ssl:ro  # SSL certificates
      - nginx-cache:/var/cache/nginx
      - nginx-logs:/var/log/nginx
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  app-network:
    driver: bridge
    name: urlshortener-network

volumes:
  postgres-data:
    name: urlshortener-postgres-data
  redis-data:
    name: urlshortener-redis-data
  nginx-cache:
    name: urlshortener-nginx-cache
  nginx-logs:
    name: urlshortener-nginx-logs
